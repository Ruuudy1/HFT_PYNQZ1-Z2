

================================================================
== Vitis HLS Report for 'txPath'
================================================================
* Date:           Thu May 29 06:17:18 2025

* Version:        2024.2 (Build 5238294 on Nov  8 2024)
* Project:        fast_hls
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+-----------+------------+
    |  Clock |  Target  | Estimated | Uncertainty|
    +--------+----------+-----------+------------+
    |ap_clk  |  25.00 ns|  17.495 ns|     6.75 ns|
    +--------+----------+-----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+----------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline |
    |   min   |   max   |    min   |    max   | min | max |   Type   |
    +---------+---------+----------+----------+-----+-----+----------+
    |        5|        5|  0.125 us|  0.125 us|    4|    4|  yes(flp)|
    +---------+---------+----------+----------+-----+-----+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 1
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 1
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 4, depth = 6


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 6
* Pipeline : 1
  Pipeline-0 : II = 4, D = 6, States = { 1 2 3 4 5 6 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 8.71>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %order_from_book, void @empty, i32 1, i32 1, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_1, void @empty_1, i32 0, i32 0, i32 0, i32 0, void @empty_1, void @empty_1, i32 4294967295, i32 0, i32 0"   --->   Operation 7 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %time_from_book, void @empty, i32 1, i32 1, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_1, void @empty_1, i32 0, i32 0, i32 0, i32 0, void @empty_1, void @empty_1, i32 4294967295, i32 0, i32 0"   --->   Operation 8 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i128 %metadata_from_book, void @empty, i32 1, i32 1, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_1, void @empty_1, i32 0, i32 0, i32 0, i32 0, void @empty_1, void @empty_1, i32 4294967295, i32 0, i32 0"   --->   Operation 9 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %tagsOut, void @empty, i32 1, i32 1, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_1, void @empty_1, i32 0, i32 0, i32 0, i32 0, void @empty_1, void @empty_1, i32 4294967295, i32 0, i32 0"   --->   Operation 10 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i16 %lbTxLengthOut, void @empty, i32 1, i32 1, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_1, void @empty_1, i32 0, i32 0, i32 0, i32 0, void @empty_1, void @empty_1, i32 4294967295, i32 0, i32 0"   --->   Operation 11 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i96 %lbTxMetadataOut, void @empty, i32 1, i32 1, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_1, void @empty_1, i32 0, i32 0, i32 0, i32 0, void @empty_1, void @empty_1, i32 4294967295, i32 0, i32 0"   --->   Operation 12 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i128 %lbTxDataOut, void @empty, i32 1, i32 1, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_1, void @empty_1, i32 0, i32 0, i32 0, i32 0, void @empty_1, void @empty_1, i32 4294967295, i32 0, i32 0"   --->   Operation 13 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%specpipeline_ln355 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_1" [fast_src/fast_protocol.cpp:355]   --->   Operation 14 'specpipeline' 'specpipeline_ln355' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%next_state_load = load i2 %next_state" [fast_src/fast_protocol.cpp:367]   --->   Operation 15 'load' 'next_state_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (1.56ns)   --->   "%switch_ln367 = switch i2 %next_state_load, void %sw.bb, i2 2, void %sw.bb104, i2 1, void %sw.bb82" [fast_src/fast_protocol.cpp:367]   --->   Operation 16 'switch' 'switch_ln367' <Predicate = true> <Delay = 1.56>
ST_1 : Operation 17 [1/1] (1.72ns)   --->   "%tmp = nbreadreq i1 @_ssdm_op_NbReadReq.axis.i128P128A, i128 %metadata_from_book, i32 1" [fast_src/fast_protocol.cpp:371]   --->   Operation 17 'nbreadreq' 'tmp' <Predicate = (next_state_load != 2 & next_state_load != 1)> <Delay = 1.72> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.72> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%br_ln371 = br i1 %tmp, void %if.end81, void %land.lhs.true" [fast_src/fast_protocol.cpp:371]   --->   Operation 18 'br' 'br_ln371' <Predicate = (next_state_load != 2 & next_state_load != 1)> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (1.82ns)   --->   "%tmp_3 = nbreadreq i1 @_ssdm_op_NbReadReq.axis.i64P128A, i64 %time_from_book, i32 1" [fast_src/fast_protocol.cpp:371]   --->   Operation 19 'nbreadreq' 'tmp_3' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp)> <Delay = 1.82> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 2.48> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%br_ln372 = br i1 %tmp_3, void %if.end81, void %land.lhs.true5" [fast_src/fast_protocol.cpp:372]   --->   Operation 20 'br' 'br_ln372' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp)> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (1.82ns)   --->   "%tmp_5 = nbreadreq i1 @_ssdm_op_NbReadReq.axis.i64P128A, i64 %order_from_book, i32 1" [fast_src/fast_protocol.cpp:372]   --->   Operation 21 'nbreadreq' 'tmp_5' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3)> <Delay = 1.82> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 2.48> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%br_ln372 = br i1 %tmp_5, void %if.end81, void %land.lhs.true7" [fast_src/fast_protocol.cpp:372]   --->   Operation 22 'br' 'br_ln372' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3)> <Delay = 0.00>
ST_1 : Operation 23 [2/2] (1.77ns)   --->   "%tmp_6 = nbwritereq i1 @_ssdm_op_NbWriteReq.axis.i96P128A, i96 %lbTxMetadataOut, i32 1" [fast_src/fast_protocol.cpp:372]   --->   Operation 23 'nbwritereq' 'tmp_6' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5)> <Delay = 1.77> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 2.10> <Adapter> <Opcode : 'read' 'write'>

State 2 <SV = 1> <Delay = 3.01>
ST_2 : Operation 24 [2/2] (1.72ns)   --->   "%tmp_1 = nbwritereq i1 @_ssdm_op_NbWriteReq.axis.i128P128A, i128 %lbTxDataOut, i32 1" [fast_src/fast_protocol.cpp:454]   --->   Operation 24 'nbwritereq' 'tmp_1' <Predicate = (next_state_load == 1)> <Delay = 1.72> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.72> <Adapter> <Opcode : 'read' 'write'>
ST_2 : Operation 25 [2/2] (1.72ns)   --->   "%tmp_2 = nbwritereq i1 @_ssdm_op_NbWriteReq.axis.i128P128A, i128 %lbTxDataOut, i32 1" [fast_src/fast_protocol.cpp:476]   --->   Operation 25 'nbwritereq' 'tmp_2' <Predicate = (next_state_load == 2)> <Delay = 1.72> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.72> <Adapter> <Opcode : 'read' 'write'>
ST_2 : Operation 26 [1/2] (1.77ns)   --->   "%tmp_6 = nbwritereq i1 @_ssdm_op_NbWriteReq.axis.i96P128A, i96 %lbTxMetadataOut, i32 1" [fast_src/fast_protocol.cpp:372]   --->   Operation 26 'nbwritereq' 'tmp_6' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5)> <Delay = 1.77> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 2.10> <Adapter> <Opcode : 'read' 'write'>
ST_2 : Operation 27 [1/1] (0.00ns)   --->   "%br_ln373 = br i1 %tmp_6, void %if.end81, void %land.lhs.true9" [fast_src/fast_protocol.cpp:373]   --->   Operation 27 'br' 'br_ln373' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5)> <Delay = 0.00>
ST_2 : Operation 28 [2/2] (1.24ns)   --->   "%tmp_7 = nbwritereq i1 @_ssdm_op_NbWriteReq.axis.i16P128A, i16 %lbTxLengthOut, i32 1" [fast_src/fast_protocol.cpp:373]   --->   Operation 28 'nbwritereq' 'tmp_7' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6)> <Delay = 1.24> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.87> <Adapter> <Opcode : 'read' 'write'>

State 3 <SV = 2> <Delay = 3.43>
ST_3 : Operation 29 [1/2] (1.72ns)   --->   "%tmp_1 = nbwritereq i1 @_ssdm_op_NbWriteReq.axis.i128P128A, i128 %lbTxDataOut, i32 1" [fast_src/fast_protocol.cpp:454]   --->   Operation 29 'nbwritereq' 'tmp_1' <Predicate = (next_state_load == 1)> <Delay = 1.72> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.72> <Adapter> <Opcode : 'read' 'write'>
ST_3 : Operation 30 [1/1] (0.00ns)   --->   "%br_ln454 = br i1 %tmp_1, void %if.end103, void %if.then84" [fast_src/fast_protocol.cpp:454]   --->   Operation 30 'br' 'br_ln454' <Predicate = (next_state_load == 1)> <Delay = 0.00>
ST_3 : Operation 31 [1/1] (1.58ns)   --->   "%store_ln469 = store i16 8, i16 %lbPacketLength" [fast_src/fast_protocol.cpp:469]   --->   Operation 31 'store' 'store_ln469' <Predicate = (next_state_load == 1 & tmp_1)> <Delay = 1.58>
ST_3 : Operation 32 [1/1] (1.70ns)   --->   "%store_ln471 = store i2 2, i2 %next_state" [fast_src/fast_protocol.cpp:471]   --->   Operation 32 'store' 'store_ln471' <Predicate = (next_state_load == 1 & tmp_1)> <Delay = 1.70>
ST_3 : Operation 33 [1/2] (1.72ns)   --->   "%tmp_2 = nbwritereq i1 @_ssdm_op_NbWriteReq.axis.i128P128A, i128 %lbTxDataOut, i32 1" [fast_src/fast_protocol.cpp:476]   --->   Operation 33 'nbwritereq' 'tmp_2' <Predicate = (next_state_load == 2)> <Delay = 1.72> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.72> <Adapter> <Opcode : 'read' 'write'>
ST_3 : Operation 34 [1/1] (0.00ns)   --->   "%br_ln476 = br i1 %tmp_2, void %if.end131, void %land.lhs.true106" [fast_src/fast_protocol.cpp:476]   --->   Operation 34 'br' 'br_ln476' <Predicate = (next_state_load == 2)> <Delay = 0.00>
ST_3 : Operation 35 [2/2] (1.24ns)   --->   "%tmp_4 = nbwritereq i1 @_ssdm_op_NbWriteReq.axis.i16P128A, i16 %lbTxLengthOut, i32 1" [fast_src/fast_protocol.cpp:476]   --->   Operation 35 'nbwritereq' 'tmp_4' <Predicate = (next_state_load == 2 & tmp_2)> <Delay = 1.24> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.87> <Adapter> <Opcode : 'read' 'write'>
ST_3 : Operation 36 [1/2] (1.24ns)   --->   "%tmp_7 = nbwritereq i1 @_ssdm_op_NbWriteReq.axis.i16P128A, i16 %lbTxLengthOut, i32 1" [fast_src/fast_protocol.cpp:373]   --->   Operation 36 'nbwritereq' 'tmp_7' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6)> <Delay = 1.24> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.87> <Adapter> <Opcode : 'read' 'write'>
ST_3 : Operation 37 [1/1] (0.00ns)   --->   "%br_ln373 = br i1 %tmp_7, void %if.end81, void %land.lhs.true11" [fast_src/fast_protocol.cpp:373]   --->   Operation 37 'br' 'br_ln373' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6)> <Delay = 0.00>
ST_3 : Operation 38 [2/2] (1.82ns)   --->   "%tmp_8 = nbwritereq i1 @_ssdm_op_NbWriteReq.axis.i64P128A, i64 %tagsOut, i32 1" [fast_src/fast_protocol.cpp:373]   --->   Operation 38 'nbwritereq' 'tmp_8' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7)> <Delay = 1.82> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 2.48> <Adapter> <Opcode : 'read' 'write'>

State 4 <SV = 3> <Delay = 5.07>
ST_4 : Operation 39 [1/2] (1.24ns)   --->   "%tmp_4 = nbwritereq i1 @_ssdm_op_NbWriteReq.axis.i16P128A, i16 %lbTxLengthOut, i32 1" [fast_src/fast_protocol.cpp:476]   --->   Operation 39 'nbwritereq' 'tmp_4' <Predicate = (next_state_load == 2 & tmp_2)> <Delay = 1.24> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.87> <Adapter> <Opcode : 'read' 'write'>
ST_4 : Operation 40 [1/1] (0.00ns)   --->   "%br_ln476 = br i1 %tmp_4, void %if.end131, void %if.then108" [fast_src/fast_protocol.cpp:476]   --->   Operation 40 'br' 'br_ln476' <Predicate = (next_state_load == 2 & tmp_2)> <Delay = 0.00>
ST_4 : Operation 41 [1/1] (1.70ns)   --->   "%store_ln495 = store i2 0, i2 %next_state" [fast_src/fast_protocol.cpp:495]   --->   Operation 41 'store' 'store_ln495' <Predicate = (next_state_load == 2 & tmp_2 & tmp_4)> <Delay = 1.70>
ST_4 : Operation 42 [1/2] (1.82ns)   --->   "%tmp_8 = nbwritereq i1 @_ssdm_op_NbWriteReq.axis.i64P128A, i64 %tagsOut, i32 1" [fast_src/fast_protocol.cpp:373]   --->   Operation 42 'nbwritereq' 'tmp_8' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7)> <Delay = 1.82> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 2.48> <Adapter> <Opcode : 'read' 'write'>
ST_4 : Operation 43 [1/1] (0.00ns)   --->   "%br_ln371 = br i1 %tmp_8, void %if.end81, void %if.then_ifconv" [fast_src/fast_protocol.cpp:371]   --->   Operation 43 'br' 'br_ln371' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7)> <Delay = 0.00>
ST_4 : Operation 44 [1/1] (0.51ns)   --->   "%time_from_book_read = read i64 @_ssdm_op_Read.axis.volatile.i64P128A, i64 %time_from_book" [fast_src/fast_protocol.cpp:376]   --->   Operation 44 'read' 'time_from_book_read' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.51> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 2.48> <Adapter> <Opcode : 'read' 'write'>
ST_4 : Operation 45 [1/1] (0.45ns)   --->   "%metadata_from_book_read = read i128 @_ssdm_op_Read.axis.volatile.i128P128A, i128 %metadata_from_book" [fast_src/fast_protocol.cpp:377]   --->   Operation 45 'read' 'metadata_from_book_read' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.45> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.72> <Adapter> <Opcode : 'read' 'write'>
ST_4 : Operation 46 [1/1] (0.00ns)   --->   "%trunc_ln377 = trunc i128 %metadata_from_book_read" [fast_src/fast_protocol.cpp:377]   --->   Operation 46 'trunc' 'trunc_ln377' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_4 : Operation 47 [1/1] (0.00ns)   --->   "%tmp_s = partselect i32 @_ssdm_op_PartSelect.i32.i128.i32.i32, i128 %metadata_from_book_read, i32 96, i32 127" [fast_src/fast_protocol.cpp:377]   --->   Operation 47 'partselect' 'tmp_s' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_4 : Operation 48 [1/1] (0.00ns)   --->   "%tmp_9 = partselect i48 @_ssdm_op_PartSelect.i48.i128.i32.i32, i128 %metadata_from_book_read, i32 32, i32 79" [fast_src/fast_protocol.cpp:377]   --->   Operation 48 'partselect' 'tmp_9' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_4 : Operation 49 [1/1] (0.00ns)   --->   "%p_0 = bitconcatenate i96 @_ssdm_op_BitConcatenate.i96.i32.i48.i16, i32 %tmp_s, i48 %tmp_9, i16 %trunc_ln377" [fast_src/fast_protocol.cpp:377]   --->   Operation 49 'bitconcatenate' 'p_0' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_4 : Operation 50 [2/2] (1.77ns)   --->   "%write_ln377 = write void @_ssdm_op_Write.axis.volatile.i96P128A, i96 %lbTxMetadataOut, i96 %p_0" [fast_src/fast_protocol.cpp:377]   --->   Operation 50 'write' 'write_ln377' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.77> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 2.10> <Adapter> <Opcode : 'read' 'write'>
ST_4 : Operation 51 [1/1] (0.51ns)   --->   "%order_from_book_read = read i64 @_ssdm_op_Read.axis.volatile.i64P128A, i64 %order_from_book" [fast_src/fast_protocol.cpp:380]   --->   Operation 51 'read' 'order_from_book_read' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.51> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 2.48> <Adapter> <Opcode : 'read' 'write'>
ST_4 : Operation 52 [1/1] (0.00ns)   --->   "%tmp_10 = bitselect i1 @_ssdm_op_BitSelect.i1.i64.i32, i64 %order_from_book_read, i32 23" [fast_src/fast_protocol.cpp:400]   --->   Operation 52 'bitselect' 'tmp_10' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_4 : Operation 53 [1/1] (0.00ns)   --->   "%tmp_16 = partselect i7 @_ssdm_op_PartSelect.i7.i64.i32.i32, i64 %order_from_book_read, i32 16, i32 22" [fast_src/fast_protocol.cpp:404]   --->   Operation 53 'partselect' 'tmp_16' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_4 : Operation 54 [1/1] (0.00ns) (grouped into LUT with out node message_offset_1)   --->   "%message_offset = select i1 %tmp_10, i3 6, i3 5" [fast_src/fast_protocol.cpp:404]   --->   Operation 54 'select' 'message_offset' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.98> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 55 [1/1] (0.00ns)   --->   "%curr_byte_1 = partselect i4 @_ssdm_op_PartSelect.i4.i64.i32.i32, i64 %order_from_book_read, i32 52, i32 55" [fast_src/fast_protocol.cpp:413]   --->   Operation 55 'partselect' 'curr_byte_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_4 : Operation 56 [1/1] (1.73ns)   --->   "%icmp_ln415 = icmp_eq  i4 %curr_byte_1, i4 0" [fast_src/fast_protocol.cpp:415]   --->   Operation 56 'icmp' 'icmp_ln415' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.73> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 57 [1/1] (0.00ns) (grouped into LUT with out node message_offset_1)   --->   "%select_ln417_2 = select i1 %tmp_10, i3 7, i3 6" [fast_src/fast_protocol.cpp:417]   --->   Operation 57 'select' 'select_ln417_2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 58 [1/1] (0.99ns) (out node of the LUT)   --->   "%message_offset_1 = select i1 %icmp_ln415, i3 %message_offset, i3 %select_ln417_2" [fast_src/fast_protocol.cpp:415]   --->   Operation 58 'select' 'message_offset_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.99> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.98> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 59 [1/1] (0.00ns)   --->   "%curr_byte_2 = partselect i7 @_ssdm_op_PartSelect.i7.i64.i32.i32, i64 %order_from_book_read, i32 45, i32 51" [fast_src/fast_protocol.cpp:411]   --->   Operation 59 'partselect' 'curr_byte_2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_4 : Operation 60 [1/1] (1.87ns)   --->   "%icmp_ln415_1 = icmp_ne  i7 %curr_byte_2, i7 0" [fast_src/fast_protocol.cpp:415]   --->   Operation 60 'icmp' 'icmp_ln415_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.87> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.87> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 61 [1/1] (0.00ns)   --->   "%curr_byte_3 = partselect i7 @_ssdm_op_PartSelect.i7.i64.i32.i32, i64 %order_from_book_read, i32 38, i32 44" [fast_src/fast_protocol.cpp:411]   --->   Operation 61 'partselect' 'curr_byte_3' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_4 : Operation 62 [1/1] (0.00ns)   --->   "%encoded_message_6 = partselect i7 @_ssdm_op_PartSelect.i7.i64.i32.i32, i64 %order_from_book_read, i32 31, i32 37" [fast_src/fast_protocol.cpp:411]   --->   Operation 62 'partselect' 'encoded_message_6' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_4 : Operation 63 [1/1] (0.00ns)   --->   "%tmp_17 = partselect i7 @_ssdm_op_PartSelect.i7.i64.i32.i32, i64 %order_from_book_read, i32 24, i32 30" [fast_src/fast_protocol.cpp:425]   --->   Operation 63 'partselect' 'tmp_17' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_4 : Operation 64 [1/1] (0.00ns)   --->   "%tmp_18 = partselect i3 @_ssdm_op_PartSelect.i3.i64.i32.i32, i64 %order_from_book_read, i32 56, i32 58" [fast_src/fast_protocol.cpp:427]   --->   Operation 64 'partselect' 'tmp_18' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_4 : Operation 65 [1/1] (1.70ns)   --->   "%store_ln448 = store i2 1, i2 %next_state" [fast_src/fast_protocol.cpp:448]   --->   Operation 65 'store' 'store_ln448' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.70>

State 5 <SV = 4> <Delay = 17.4>
ST_5 : Operation 66 [1/1] (0.00ns)   --->   "%first_packet_data_load = load i64 %first_packet_data" [fast_src/fast_protocol.cpp:458]   --->   Operation 66 'load' 'first_packet_data_load' <Predicate = (next_state_load == 1 & tmp_1)> <Delay = 0.00>
ST_5 : Operation 67 [1/1] (0.00ns)   --->   "%or_ln = bitconcatenate i65 @_ssdm_op_BitConcatenate.i65.i1.i64, i1 1, i64 %first_packet_data_load" [fast_src/fast_protocol.cpp:458]   --->   Operation 67 'bitconcatenate' 'or_ln' <Predicate = (next_state_load == 1 & tmp_1)> <Delay = 0.00>
ST_5 : Operation 68 [1/1] (0.00ns)   --->   "%sext_ln458 = sext i65 %or_ln" [fast_src/fast_protocol.cpp:458]   --->   Operation 68 'sext' 'sext_ln458' <Predicate = (next_state_load == 1 & tmp_1)> <Delay = 0.00>
ST_5 : Operation 69 [1/1] (0.00ns)   --->   "%zext_ln458 = zext i72 %sext_ln458" [fast_src/fast_protocol.cpp:458]   --->   Operation 69 'zext' 'zext_ln458' <Predicate = (next_state_load == 1 & tmp_1)> <Delay = 0.00>
ST_5 : Operation 70 [2/2] (1.72ns)   --->   "%write_ln458 = write void @_ssdm_op_Write.axis.volatile.i128P128A, i128 %lbTxDataOut, i128 %zext_ln458" [fast_src/fast_protocol.cpp:458]   --->   Operation 70 'write' 'write_ln458' <Predicate = (next_state_load == 1 & tmp_1)> <Delay = 1.72> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.72> <Adapter> <Opcode : 'read' 'write'>
ST_5 : Operation 71 [1/1] (0.00ns)   --->   "%second_packet_data_load = load i32 %second_packet_data" [fast_src/fast_protocol.cpp:479]   --->   Operation 71 'load' 'second_packet_data_load' <Predicate = (next_state_load == 2 & tmp_2 & tmp_4)> <Delay = 0.00>
ST_5 : Operation 72 [1/1] (0.00ns)   --->   "%zext_ln479 = zext i32 %second_packet_data_load" [fast_src/fast_protocol.cpp:479]   --->   Operation 72 'zext' 'zext_ln479' <Predicate = (next_state_load == 2 & tmp_2 & tmp_4)> <Delay = 0.00>
ST_5 : Operation 73 [1/1] (0.00ns)   --->   "%or_ln1 = bitconcatenate i65 @_ssdm_op_BitConcatenate.i65.i1.i64, i1 1, i64 %zext_ln479" [fast_src/fast_protocol.cpp:479]   --->   Operation 73 'bitconcatenate' 'or_ln1' <Predicate = (next_state_load == 2 & tmp_2 & tmp_4)> <Delay = 0.00>
ST_5 : Operation 74 [1/1] (0.00ns)   --->   "%sext_ln479 = sext i65 %or_ln1" [fast_src/fast_protocol.cpp:479]   --->   Operation 74 'sext' 'sext_ln479' <Predicate = (next_state_load == 2 & tmp_2 & tmp_4)> <Delay = 0.00>
ST_5 : Operation 75 [1/1] (0.00ns)   --->   "%zext_ln479_1 = zext i73 %sext_ln479" [fast_src/fast_protocol.cpp:479]   --->   Operation 75 'zext' 'zext_ln479_1' <Predicate = (next_state_load == 2 & tmp_2 & tmp_4)> <Delay = 0.00>
ST_5 : Operation 76 [2/2] (1.72ns)   --->   "%write_ln479 = write void @_ssdm_op_Write.axis.volatile.i128P128A, i128 %lbTxDataOut, i128 %zext_ln479_1" [fast_src/fast_protocol.cpp:479]   --->   Operation 76 'write' 'write_ln479' <Predicate = (next_state_load == 2 & tmp_2 & tmp_4)> <Delay = 1.72> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.72> <Adapter> <Opcode : 'read' 'write'>
ST_5 : Operation 77 [1/1] (0.00ns)   --->   "%lbPacketLength_load = load i16 %lbPacketLength" [fast_src/fast_protocol.cpp:490]   --->   Operation 77 'load' 'lbPacketLength_load' <Predicate = (next_state_load == 2 & tmp_2 & tmp_4)> <Delay = 0.00>
ST_5 : Operation 78 [1/1] (2.07ns)   --->   "%add_ln490 = add i16 %lbPacketLength_load, i16 8" [fast_src/fast_protocol.cpp:490]   --->   Operation 78 'add' 'add_ln490' <Predicate = (next_state_load == 2 & tmp_2 & tmp_4)> <Delay = 2.07> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.07> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 79 [1/1] (1.58ns)   --->   "%store_ln490 = store i16 %add_ln490, i16 %lbPacketLength" [fast_src/fast_protocol.cpp:490]   --->   Operation 79 'store' 'store_ln490' <Predicate = (next_state_load == 2 & tmp_2 & tmp_4)> <Delay = 1.58>
ST_5 : Operation 80 [2/2] (1.24ns)   --->   "%write_ln493 = write void @_ssdm_op_Write.axis.volatile.i16P128A, i16 %lbTxLengthOut, i16 %add_ln490" [fast_src/fast_protocol.cpp:493]   --->   Operation 80 'write' 'write_ln493' <Predicate = (next_state_load == 2 & tmp_2 & tmp_4)> <Delay = 1.24> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.87> <Adapter> <Opcode : 'read' 'write'>
ST_5 : Operation 81 [2/2] (1.82ns)   --->   "%write_ln376 = write void @_ssdm_op_Write.axis.volatile.i64P128A, i64 %tagsOut, i64 %time_from_book_read" [fast_src/fast_protocol.cpp:376]   --->   Operation 81 'write' 'write_ln376' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.82> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 2.48> <Adapter> <Opcode : 'read' 'write'>
ST_5 : Operation 82 [1/2] (1.77ns)   --->   "%write_ln377 = write void @_ssdm_op_Write.axis.volatile.i96P128A, i96 %lbTxMetadataOut, i96 %p_0" [fast_src/fast_protocol.cpp:377]   --->   Operation 82 'write' 'write_ln377' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.77> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 2.10> <Adapter> <Opcode : 'read' 'write'>
ST_5 : Operation 83 [1/1] (0.00ns)   --->   "%or_ln2 = bitconcatenate i8 @_ssdm_op_BitConcatenate.i8.i1.i7, i1 1, i7 %tmp_16" [fast_src/fast_protocol.cpp:404]   --->   Operation 83 'bitconcatenate' 'or_ln2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 84 [1/1] (1.24ns)   --->   "%select_ln400 = select i1 %tmp_10, i8 1, i8 %or_ln2" [fast_src/fast_protocol.cpp:400]   --->   Operation 84 'select' 'select_ln400' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.24> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 85 [1/1] (0.00ns) (grouped into LUT with out node empty)   --->   "%select_ln400_1 = select i1 %tmp_10, i8 %or_ln2, i8 0" [fast_src/fast_protocol.cpp:400]   --->   Operation 85 'select' 'select_ln400_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8 & icmp_ln415)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 86 [1/1] (0.00ns) (grouped into LUT with out node empty)   --->   "%zext_ln411 = zext i4 %curr_byte_1" [fast_src/fast_protocol.cpp:411]   --->   Operation 86 'zext' 'zext_ln411' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8 & !icmp_ln415 & !tmp_10)> <Delay = 0.00>
ST_5 : Operation 87 [1/1] (0.00ns) (grouped into LUT with out node empty)   --->   "%select_ln417 = select i1 %tmp_10, i8 %or_ln2, i8 %zext_ln411" [fast_src/fast_protocol.cpp:417]   --->   Operation 87 'select' 'select_ln417' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8 & !icmp_ln415)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 88 [1/1] (0.00ns) (grouped into LUT with out node empty_18)   --->   "%select_ln417_1 = select i1 %tmp_10, i4 %curr_byte_1, i4 0" [fast_src/fast_protocol.cpp:417]   --->   Operation 88 'select' 'select_ln417_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8 & !icmp_ln415)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 89 [1/1] (1.24ns) (out node of the LUT)   --->   "%empty = select i1 %icmp_ln415, i8 %select_ln400_1, i8 %select_ln417" [fast_src/fast_protocol.cpp:415]   --->   Operation 89 'select' 'empty' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.24> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 90 [1/1] (0.00ns) (grouped into LUT with out node empty_18)   --->   "%empty_16 = select i1 %icmp_ln415, i4 0, i4 %select_ln417_1" [fast_src/fast_protocol.cpp:415]   --->   Operation 90 'select' 'empty_16' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 91 [1/1] (0.00ns) (grouped into LUT with out node triggered_1)   --->   "%triggered = xor i1 %icmp_ln415, i1 1" [fast_src/fast_protocol.cpp:415]   --->   Operation 91 'xor' 'triggered' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 92 [1/1] (0.00ns)   --->   "%zext_ln406 = zext i3 %message_offset_1" [fast_src/fast_protocol.cpp:406]   --->   Operation 92 'zext' 'zext_ln406' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 93 [1/1] (0.00ns) (grouped into LUT with out node empty_18)   --->   "%zext_ln406_1 = zext i4 %empty_16" [fast_src/fast_protocol.cpp:406]   --->   Operation 93 'zext' 'zext_ln406_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 94 [1/1] (0.00ns) (grouped into LUT with out node empty_17)   --->   "%zext_ln411_1 = zext i7 %curr_byte_2" [fast_src/fast_protocol.cpp:411]   --->   Operation 94 'zext' 'zext_ln411_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 95 [1/1] (0.97ns) (out node of the LUT)   --->   "%triggered_1 = or i1 %icmp_ln415_1, i1 %triggered" [fast_src/fast_protocol.cpp:415]   --->   Operation 95 'or' 'triggered_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 96 [1/1] (1.65ns)   --->   "%icmp_ln417 = icmp_eq  i3 %message_offset_1, i3 7" [fast_src/fast_protocol.cpp:417]   --->   Operation 96 'icmp' 'icmp_ln417' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.65> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 97 [1/1] (1.65ns)   --->   "%icmp_ln417_1 = icmp_eq  i3 %message_offset_1, i3 6" [fast_src/fast_protocol.cpp:417]   --->   Operation 97 'icmp' 'icmp_ln417_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.65> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 98 [1/1] (0.00ns) (grouped into LUT with out node and_ln415)   --->   "%xor_ln415 = xor i1 %icmp_ln415_1, i1 1" [fast_src/fast_protocol.cpp:415]   --->   Operation 98 'xor' 'xor_ln415' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 99 [1/1] (0.97ns) (out node of the LUT)   --->   "%and_ln415 = and i1 %icmp_ln415, i1 %xor_ln415" [fast_src/fast_protocol.cpp:415]   --->   Operation 99 'and' 'and_ln415' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 100 [1/1] (0.00ns) (grouped into LUT with out node empty_17)   --->   "%or_ln417 = or i1 %icmp_ln417_1, i1 %and_ln415" [fast_src/fast_protocol.cpp:417]   --->   Operation 100 'or' 'or_ln417' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 101 [1/1] (0.00ns) (grouped into LUT with out node empty_17)   --->   "%or_ln417_1 = or i1 %or_ln417, i1 %icmp_ln417" [fast_src/fast_protocol.cpp:417]   --->   Operation 101 'or' 'or_ln417_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 102 [1/1] (1.24ns) (out node of the LUT)   --->   "%empty_17 = select i1 %or_ln417_1, i8 %empty, i8 %zext_ln411_1" [fast_src/fast_protocol.cpp:417]   --->   Operation 102 'select' 'empty_17' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.24> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 103 [1/1] (0.97ns)   --->   "%and_ln417 = and i1 %triggered_1, i1 %icmp_ln417_1" [fast_src/fast_protocol.cpp:417]   --->   Operation 103 'and' 'and_ln417' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 104 [1/1] (1.02ns) (out node of the LUT)   --->   "%empty_18 = select i1 %and_ln417, i7 %curr_byte_2, i7 %zext_ln406_1" [fast_src/fast_protocol.cpp:417]   --->   Operation 104 'select' 'empty_18' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.02> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 105 [1/1] (0.97ns)   --->   "%and_ln417_1 = and i1 %triggered_1, i1 %icmp_ln417" [fast_src/fast_protocol.cpp:417]   --->   Operation 105 'and' 'and_ln417_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 106 [1/1] (0.00ns) (grouped into LUT with out node empty_28)   --->   "%empty_19 = select i1 %and_ln417_1, i7 %curr_byte_2, i7 0" [fast_src/fast_protocol.cpp:417]   --->   Operation 106 'select' 'empty_19' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 107 [1/1] (0.00ns)   --->   "%sel_tmp = bitconcatenate i3 @_ssdm_op_BitConcatenate.i3.i1.i1.i1, i1 %and_ln415, i1 %and_ln417_1, i1 %and_ln417" [fast_src/fast_protocol.cpp:415]   --->   Operation 107 'bitconcatenate' 'sel_tmp' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 108 [1/1] (1.70ns)   --->   "%message_offset_2 = sparsemux i4 @_ssdm_op_SparseMux.ap_auto.4i4.i4.i3, i3 4, i4 %zext_ln406, i3 2, i4 8, i3 1, i4 7, i3 0, i4 6, i4 0, i3 %sel_tmp" [fast_src/fast_protocol.cpp:406]   --->   Operation 108 'sparsemux' 'message_offset_2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.70> <CoreInst = "OneHotSparseMux_HasDef">   --->   Core 140 'OneHotSparseMux_HasDef' <Latency = 0> <II = 1> <Delay = 1.70> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 109 [1/1] (0.00ns) (grouped into LUT with out node empty_21)   --->   "%zext_ln411_2 = zext i7 %curr_byte_3" [fast_src/fast_protocol.cpp:411]   --->   Operation 109 'zext' 'zext_ln411_2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 110 [1/1] (1.87ns)   --->   "%icmp_ln415_2 = icmp_ne  i7 %curr_byte_3, i7 0" [fast_src/fast_protocol.cpp:415]   --->   Operation 110 'icmp' 'icmp_ln415_2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.87> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.87> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 111 [1/1] (0.97ns)   --->   "%triggered_2 = or i1 %icmp_ln415_2, i1 %triggered_1" [fast_src/fast_protocol.cpp:415]   --->   Operation 111 'or' 'triggered_2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 112 [1/1] (1.73ns)   --->   "%icmp_ln417_2 = icmp_eq  i4 %message_offset_2, i4 8" [fast_src/fast_protocol.cpp:417]   --->   Operation 112 'icmp' 'icmp_ln417_2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.73> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 113 [1/1] (0.97ns)   --->   "%and_ln417_2 = and i1 %triggered_2, i1 %icmp_ln417_2" [fast_src/fast_protocol.cpp:417]   --->   Operation 113 'and' 'and_ln417_2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 114 [1/1] (0.00ns) (grouped into LUT with out node empty_24)   --->   "%empty_20 = select i1 %and_ln417_2, i7 %curr_byte_3, i7 0" [fast_src/fast_protocol.cpp:417]   --->   Operation 114 'select' 'empty_20' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 115 [1/1] (1.73ns)   --->   "%icmp_ln417_3 = icmp_eq  i4 %message_offset_2, i4 7" [fast_src/fast_protocol.cpp:417]   --->   Operation 115 'icmp' 'icmp_ln417_3' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.73> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 116 [1/1] (1.73ns)   --->   "%icmp_ln417_4 = icmp_eq  i4 %message_offset_2, i4 6" [fast_src/fast_protocol.cpp:417]   --->   Operation 116 'icmp' 'icmp_ln417_4' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.73> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 117 [1/1] (0.97ns)   --->   "%xor_ln415_1 = xor i1 %triggered_2, i1 1" [fast_src/fast_protocol.cpp:415]   --->   Operation 117 'xor' 'xor_ln415_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 118 [1/1] (0.00ns) (grouped into LUT with out node empty_21)   --->   "%or_ln417_2 = or i1 %icmp_ln417_2, i1 %xor_ln415_1" [fast_src/fast_protocol.cpp:417]   --->   Operation 118 'or' 'or_ln417_2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 119 [1/1] (0.00ns) (grouped into LUT with out node empty_21)   --->   "%or_ln417_3 = or i1 %icmp_ln417_3, i1 %icmp_ln417_4" [fast_src/fast_protocol.cpp:417]   --->   Operation 119 'or' 'or_ln417_3' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 120 [1/1] (0.00ns) (grouped into LUT with out node empty_21)   --->   "%or_ln417_4 = or i1 %or_ln417_3, i1 %or_ln417_2" [fast_src/fast_protocol.cpp:417]   --->   Operation 120 'or' 'or_ln417_4' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 121 [1/1] (1.24ns) (out node of the LUT)   --->   "%empty_21 = select i1 %or_ln417_4, i8 %empty_17, i8 %zext_ln411_2" [fast_src/fast_protocol.cpp:417]   --->   Operation 121 'select' 'empty_21' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.24> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 122 [1/1] (0.97ns)   --->   "%and_ln417_3 = and i1 %triggered_2, i1 %icmp_ln417_4" [fast_src/fast_protocol.cpp:417]   --->   Operation 122 'and' 'and_ln417_3' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 123 [1/1] (0.00ns) (grouped into LUT with out node empty_27)   --->   "%empty_22 = select i1 %and_ln417_3, i7 %curr_byte_3, i7 %empty_18" [fast_src/fast_protocol.cpp:417]   --->   Operation 123 'select' 'empty_22' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 124 [1/1] (0.97ns)   --->   "%and_ln417_4 = and i1 %triggered_2, i1 %icmp_ln417_3" [fast_src/fast_protocol.cpp:417]   --->   Operation 124 'and' 'and_ln417_4' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 125 [1/1] (0.00ns) (grouped into LUT with out node empty_28)   --->   "%empty_23 = select i1 %and_ln417_4, i7 %curr_byte_3, i7 %empty_19" [fast_src/fast_protocol.cpp:417]   --->   Operation 125 'select' 'empty_23' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 126 [1/1] (0.00ns)   --->   "%sel_tmp1 = bitconcatenate i4 @_ssdm_op_BitConcatenate.i4.i1.i1.i1.i1, i1 %xor_ln415_1, i1 %and_ln417_2, i1 %and_ln417_4, i1 %and_ln417_3" [fast_src/fast_protocol.cpp:415]   --->   Operation 126 'bitconcatenate' 'sel_tmp1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 127 [1/1] (1.82ns)   --->   "%message_offset_3 = sparsemux i4 @_ssdm_op_SparseMux.ap_auto.5i4.i4.i4, i4 8, i4 %message_offset_2, i4 4, i4 9, i4 2, i4 8, i4 1, i4 7, i4 0, i4 6, i4 0, i4 %sel_tmp1" [fast_src/fast_protocol.cpp:406]   --->   Operation 127 'sparsemux' 'message_offset_3' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.82> <CoreInst = "OneHotSparseMux_HasDef">   --->   Core 140 'OneHotSparseMux_HasDef' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 128 [1/1] (0.00ns) (grouped into LUT with out node empty_26)   --->   "%zext_ln391 = zext i7 %encoded_message_6" [fast_src/fast_protocol.cpp:391]   --->   Operation 128 'zext' 'zext_ln391' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 129 [1/1] (1.87ns)   --->   "%icmp_ln415_3 = icmp_ne  i7 %encoded_message_6, i7 0" [fast_src/fast_protocol.cpp:415]   --->   Operation 129 'icmp' 'icmp_ln415_3' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.87> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.87> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 130 [1/1] (0.97ns)   --->   "%or_ln415 = or i1 %icmp_ln415_3, i1 %triggered_2" [fast_src/fast_protocol.cpp:415]   --->   Operation 130 'or' 'or_ln415' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 131 [1/1] (1.73ns)   --->   "%icmp_ln417_5 = icmp_eq  i4 %message_offset_3, i4 8" [fast_src/fast_protocol.cpp:417]   --->   Operation 131 'icmp' 'icmp_ln417_5' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.73> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 132 [1/1] (0.97ns)   --->   "%and_ln417_5 = and i1 %or_ln415, i1 %icmp_ln417_5" [fast_src/fast_protocol.cpp:417]   --->   Operation 132 'and' 'and_ln417_5' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 133 [1/1] (0.99ns) (out node of the LUT)   --->   "%empty_24 = select i1 %and_ln417_5, i7 %encoded_message_6, i7 %empty_20" [fast_src/fast_protocol.cpp:417]   --->   Operation 133 'select' 'empty_24' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.99> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 134 [1/1] (1.73ns)   --->   "%icmp_ln417_6 = icmp_eq  i4 %message_offset_3, i4 9" [fast_src/fast_protocol.cpp:417]   --->   Operation 134 'icmp' 'icmp_ln417_6' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.73> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 135 [1/1] (0.97ns)   --->   "%and_ln417_6 = and i1 %or_ln415, i1 %icmp_ln417_6" [fast_src/fast_protocol.cpp:417]   --->   Operation 135 'and' 'and_ln417_6' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 136 [1/1] (0.99ns)   --->   "%empty_25 = select i1 %and_ln417_6, i7 %encoded_message_6, i7 0" [fast_src/fast_protocol.cpp:417]   --->   Operation 136 'select' 'empty_25' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.99> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 137 [1/1] (1.73ns)   --->   "%icmp_ln417_7 = icmp_eq  i4 %message_offset_3, i4 7" [fast_src/fast_protocol.cpp:417]   --->   Operation 137 'icmp' 'icmp_ln417_7' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.73> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 138 [1/1] (1.73ns)   --->   "%icmp_ln417_8 = icmp_eq  i4 %message_offset_3, i4 6" [fast_src/fast_protocol.cpp:417]   --->   Operation 138 'icmp' 'icmp_ln417_8' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.73> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 139 [1/1] (0.97ns)   --->   "%xor_ln415_2 = xor i1 %or_ln415, i1 1" [fast_src/fast_protocol.cpp:415]   --->   Operation 139 'xor' 'xor_ln415_2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 140 [1/1] (0.00ns) (grouped into LUT with out node or_ln417_8)   --->   "%or_ln417_5 = or i1 %icmp_ln417_6, i1 %xor_ln415_2" [fast_src/fast_protocol.cpp:417]   --->   Operation 140 'or' 'or_ln417_5' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 141 [1/1] (0.00ns) (grouped into LUT with out node or_ln417_8)   --->   "%or_ln417_6 = or i1 %icmp_ln417_7, i1 %icmp_ln417_8" [fast_src/fast_protocol.cpp:417]   --->   Operation 141 'or' 'or_ln417_6' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 142 [1/1] (0.00ns) (grouped into LUT with out node or_ln417_8)   --->   "%or_ln417_7 = or i1 %or_ln417_6, i1 %icmp_ln417_5" [fast_src/fast_protocol.cpp:417]   --->   Operation 142 'or' 'or_ln417_7' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 143 [1/1] (0.97ns) (out node of the LUT)   --->   "%or_ln417_8 = or i1 %or_ln417_7, i1 %or_ln417_5" [fast_src/fast_protocol.cpp:417]   --->   Operation 143 'or' 'or_ln417_8' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 144 [1/1] (1.24ns) (out node of the LUT)   --->   "%empty_26 = select i1 %or_ln417_8, i8 %empty_21, i8 %zext_ln391" [fast_src/fast_protocol.cpp:417]   --->   Operation 144 'select' 'empty_26' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.24> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 145 [1/1] (0.97ns)   --->   "%and_ln417_7 = and i1 %or_ln415, i1 %icmp_ln417_8" [fast_src/fast_protocol.cpp:417]   --->   Operation 145 'and' 'and_ln417_7' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 146 [1/1] (0.99ns) (out node of the LUT)   --->   "%empty_27 = select i1 %and_ln417_7, i7 %encoded_message_6, i7 %empty_22" [fast_src/fast_protocol.cpp:417]   --->   Operation 146 'select' 'empty_27' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.99> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 147 [1/1] (0.97ns)   --->   "%and_ln417_8 = and i1 %or_ln415, i1 %icmp_ln417_7" [fast_src/fast_protocol.cpp:417]   --->   Operation 147 'and' 'and_ln417_8' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 148 [1/1] (0.99ns) (out node of the LUT)   --->   "%empty_28 = select i1 %and_ln417_8, i7 %encoded_message_6, i7 %empty_23" [fast_src/fast_protocol.cpp:417]   --->   Operation 148 'select' 'empty_28' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.99> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.99> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 149 [1/1] (0.00ns)   --->   "%sel_tmp2 = bitconcatenate i5 @_ssdm_op_BitConcatenate.i5.i1.i1.i1.i1.i1, i1 %xor_ln415_2, i1 %and_ln417_6, i1 %and_ln417_5, i1 %and_ln417_8, i1 %and_ln417_7" [fast_src/fast_protocol.cpp:415]   --->   Operation 149 'bitconcatenate' 'sel_tmp2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 150 [1/1] (1.94ns)   --->   "%message_offset_4 = sparsemux i4 @_ssdm_op_SparseMux.ap_auto.6i4.i4.i5, i5 16, i4 %message_offset_3, i5 8, i4 10, i5 4, i4 9, i5 2, i4 8, i5 1, i4 7, i5 0, i4 6, i4 0, i5 %sel_tmp2" [fast_src/fast_protocol.cpp:399]   --->   Operation 150 'sparsemux' 'message_offset_4' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.94> <CoreInst = "OneHotSparseMux_HasDef">   --->   Core 140 'OneHotSparseMux_HasDef' <Latency = 0> <II = 1> <Delay = 1.94> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 151 [1/1] (0.00ns)   --->   "%zext_ln399 = zext i4 %message_offset_4" [fast_src/fast_protocol.cpp:399]   --->   Operation 151 'zext' 'zext_ln399' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 152 [1/1] (0.00ns)   --->   "%zext_ln399_1 = zext i7 %empty_28" [fast_src/fast_protocol.cpp:399]   --->   Operation 152 'zext' 'zext_ln399_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 153 [1/1] (0.00ns)   --->   "%zext_ln399_2 = zext i7 %empty_27" [fast_src/fast_protocol.cpp:399]   --->   Operation 153 'zext' 'zext_ln399_2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 154 [1/1] (0.00ns)   --->   "%zext_ln399_3 = zext i7 %empty_25" [fast_src/fast_protocol.cpp:399]   --->   Operation 154 'zext' 'zext_ln399_3' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 155 [1/1] (0.00ns)   --->   "%zext_ln399_4 = zext i7 %empty_24" [fast_src/fast_protocol.cpp:399]   --->   Operation 155 'zext' 'zext_ln399_4' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 156 [1/1] (0.00ns)   --->   "%encoded_message = bitconcatenate i8 @_ssdm_op_BitConcatenate.i8.i1.i7, i1 1, i7 %tmp_17" [fast_src/fast_protocol.cpp:425]   --->   Operation 156 'bitconcatenate' 'encoded_message' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 157 [1/1] (0.00ns)   --->   "%zext_ln427 = zext i3 %tmp_18" [fast_src/fast_protocol.cpp:427]   --->   Operation 157 'zext' 'zext_ln427' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 158 [1/1] (0.00ns)   --->   "%encoded_message_4 = bitconcatenate i8 @_ssdm_op_BitConcatenate.i8.i1.i7, i1 1, i7 %zext_ln427" [fast_src/fast_protocol.cpp:427]   --->   Operation 158 'bitconcatenate' 'encoded_message_4' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 159 [1/1] (1.94ns)   --->   "%tmp_11 = sparsemux i8 @_ssdm_op_SparseMux.ap_auto.5i8.i8.i32, i32 7, i8 %encoded_message, i32 8, i8 %zext_ln399_1, i32 9, i8 %zext_ln399_1, i32 10, i8 %zext_ln399_1, i32 6, i8 %encoded_message_4, i8 %zext_ln399_1, i32 %zext_ln399" [fast_src/fast_protocol.cpp:425]   --->   Operation 159 'sparsemux' 'tmp_11' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.94> <CoreInst = "BinarySparseMux_HasDef">   --->   Core 138 'BinarySparseMux_HasDef' <Latency = 0> <II = 1> <Delay = 1.94> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 160 [1/1] (1.94ns)   --->   "%tmp_12 = sparsemux i8 @_ssdm_op_SparseMux.ap_auto.5i8.i8.i32, i32 7, i8 %zext_ln399_2, i32 8, i8 %zext_ln399_2, i32 9, i8 %zext_ln399_2, i32 10, i8 %zext_ln399_2, i32 6, i8 %encoded_message, i8 %encoded_message_4, i32 %zext_ln399" [fast_src/fast_protocol.cpp:399]   --->   Operation 160 'sparsemux' 'tmp_12' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.94> <CoreInst = "BinarySparseMux_HasDef">   --->   Core 138 'BinarySparseMux_HasDef' <Latency = 0> <II = 1> <Delay = 1.94> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 161 [1/1] (1.94ns)   --->   "%tmp_13 = sparsemux i8 @_ssdm_op_SparseMux.ap_auto.5i8.i8.i32, i32 7, i8 0, i32 8, i8 0, i32 9, i8 %encoded_message_4, i32 10, i8 %encoded_message, i32 6, i8 0, i8 0, i32 %zext_ln399" [fast_src/fast_protocol.cpp:427]   --->   Operation 161 'sparsemux' 'tmp_13' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.94> <CoreInst = "BinarySparseMux_HasDef">   --->   Core 138 'BinarySparseMux_HasDef' <Latency = 0> <II = 1> <Delay = 1.94> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 162 [1/1] (1.94ns)   --->   "%tmp_14 = sparsemux i8 @_ssdm_op_SparseMux.ap_auto.5i8.i8.i32, i32 7, i8 %zext_ln399_3, i32 8, i8 %encoded_message_4, i32 9, i8 %encoded_message, i32 10, i8 %zext_ln399_3, i32 6, i8 %zext_ln399_3, i8 %zext_ln399_3, i32 %zext_ln399" [fast_src/fast_protocol.cpp:399]   --->   Operation 162 'sparsemux' 'tmp_14' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.94> <CoreInst = "BinarySparseMux_HasDef">   --->   Core 138 'BinarySparseMux_HasDef' <Latency = 0> <II = 1> <Delay = 1.94> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 163 [1/1] (1.94ns)   --->   "%tmp_15 = sparsemux i8 @_ssdm_op_SparseMux.ap_auto.5i8.i8.i32, i32 7, i8 %encoded_message_4, i32 8, i8 %encoded_message, i32 9, i8 %zext_ln399_4, i32 10, i8 %zext_ln399_4, i32 6, i8 %zext_ln399_4, i8 %zext_ln399_4, i32 %zext_ln399" [fast_src/fast_protocol.cpp:427]   --->   Operation 163 'sparsemux' 'tmp_15' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.94> <CoreInst = "BinarySparseMux_HasDef">   --->   Core 138 'BinarySparseMux_HasDef' <Latency = 0> <II = 1> <Delay = 1.94> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 164 [1/1] (1.73ns)   --->   "%icmp_ln425 = icmp_eq  i4 %message_offset_4, i4 10" [fast_src/fast_protocol.cpp:425]   --->   Operation 164 'icmp' 'icmp_ln425' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.73> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 165 [1/1] (1.24ns)   --->   "%empty_29 = select i1 %icmp_ln425, i8 %encoded_message_4, i8 0" [fast_src/fast_protocol.cpp:425]   --->   Operation 165 'select' 'empty_29' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.24> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 166 [1/1] (1.73ns)   --->   "%icmp_ln425_1 = icmp_eq  i4 %message_offset_4, i4 7" [fast_src/fast_protocol.cpp:425]   --->   Operation 166 'icmp' 'icmp_ln425_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.73> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 167 [1/1] (1.73ns)   --->   "%icmp_ln425_2 = icmp_eq  i4 %message_offset_4, i4 8" [fast_src/fast_protocol.cpp:425]   --->   Operation 167 'icmp' 'icmp_ln425_2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.73> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 168 [1/1] (1.73ns)   --->   "%icmp_ln425_3 = icmp_eq  i4 %message_offset_4, i4 9" [fast_src/fast_protocol.cpp:425]   --->   Operation 168 'icmp' 'icmp_ln425_3' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.73> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 169 [1/1] (1.73ns)   --->   "%icmp_ln425_4 = icmp_eq  i4 %message_offset_4, i4 6" [fast_src/fast_protocol.cpp:425]   --->   Operation 169 'icmp' 'icmp_ln425_4' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.73> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 170 [1/1] (0.00ns) (grouped into LUT with out node or_ln425_3)   --->   "%or_ln425 = or i1 %icmp_ln425_1, i1 %icmp_ln425_2" [fast_src/fast_protocol.cpp:425]   --->   Operation 170 'or' 'or_ln425' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 171 [1/1] (0.00ns) (grouped into LUT with out node or_ln425_3)   --->   "%or_ln425_1 = or i1 %icmp_ln425, i1 %icmp_ln425_4" [fast_src/fast_protocol.cpp:425]   --->   Operation 171 'or' 'or_ln425_1' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 172 [1/1] (0.00ns) (grouped into LUT with out node or_ln425_3)   --->   "%or_ln425_2 = or i1 %or_ln425_1, i1 %icmp_ln425_3" [fast_src/fast_protocol.cpp:425]   --->   Operation 172 'or' 'or_ln425_2' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 173 [1/1] (0.97ns) (out node of the LUT)   --->   "%or_ln425_3 = or i1 %or_ln425_2, i1 %or_ln425" [fast_src/fast_protocol.cpp:425]   --->   Operation 173 'or' 'or_ln425_3' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 174 [1/1] (1.24ns) (out node of the LUT)   --->   "%empty_30 = select i1 %or_ln425_3, i8 %empty_26, i8 %encoded_message" [fast_src/fast_protocol.cpp:425]   --->   Operation 174 'select' 'empty_30' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.24> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 175 [1/1] (0.00ns)   --->   "%first_packet_data = bitconcatenate i64 @_ssdm_op_BitConcatenate.i64.i8.i8.i8.i8.i32, i8 %tmp_11, i8 %tmp_12, i8 %empty_30, i8 %select_ln400, i32 2172682748" [fast_src/fast_protocol.cpp:432]   --->   Operation 175 'bitconcatenate' 'first_packet_data' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 176 [1/1] (0.00ns)   --->   "%second_packet_data = bitconcatenate i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8, i8 %empty_29, i8 %tmp_13, i8 %tmp_14, i8 %tmp_15" [fast_src/fast_protocol.cpp:434]   --->   Operation 176 'bitconcatenate' 'second_packet_data' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 177 [1/1] (0.00ns)   --->   "%store_ln445 = store i64 %first_packet_data, i64 %first_packet_data" [fast_src/fast_protocol.cpp:445]   --->   Operation 177 'store' 'store_ln445' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_5 : Operation 178 [1/1] (0.00ns)   --->   "%store_ln446 = store i32 %second_packet_data, i32 %second_packet_data" [fast_src/fast_protocol.cpp:446]   --->   Operation 178 'store' 'store_ln446' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>

State 6 <SV = 5> <Delay = 1.82>
ST_6 : Operation 179 [1/2] (1.72ns)   --->   "%write_ln458 = write void @_ssdm_op_Write.axis.volatile.i128P128A, i128 %lbTxDataOut, i128 %zext_ln458" [fast_src/fast_protocol.cpp:458]   --->   Operation 179 'write' 'write_ln458' <Predicate = (next_state_load == 1 & tmp_1)> <Delay = 1.72> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.72> <Adapter> <Opcode : 'read' 'write'>
ST_6 : Operation 180 [1/1] (0.00ns)   --->   "%br_ln472 = br void %if.end103" [fast_src/fast_protocol.cpp:472]   --->   Operation 180 'br' 'br_ln472' <Predicate = (next_state_load == 1 & tmp_1)> <Delay = 0.00>
ST_6 : Operation 181 [1/1] (0.00ns)   --->   "%br_ln473 = br void %sw.epilog" [fast_src/fast_protocol.cpp:473]   --->   Operation 181 'br' 'br_ln473' <Predicate = (next_state_load == 1)> <Delay = 0.00>
ST_6 : Operation 182 [1/2] (1.72ns)   --->   "%write_ln479 = write void @_ssdm_op_Write.axis.volatile.i128P128A, i128 %lbTxDataOut, i128 %zext_ln479_1" [fast_src/fast_protocol.cpp:479]   --->   Operation 182 'write' 'write_ln479' <Predicate = (next_state_load == 2 & tmp_2 & tmp_4)> <Delay = 1.72> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.72> <Adapter> <Opcode : 'read' 'write'>
ST_6 : Operation 183 [1/2] (1.24ns)   --->   "%write_ln493 = write void @_ssdm_op_Write.axis.volatile.i16P128A, i16 %lbTxLengthOut, i16 %add_ln490" [fast_src/fast_protocol.cpp:493]   --->   Operation 183 'write' 'write_ln493' <Predicate = (next_state_load == 2 & tmp_2 & tmp_4)> <Delay = 1.24> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 1.87> <Adapter> <Opcode : 'read' 'write'>
ST_6 : Operation 184 [1/1] (0.00ns)   --->   "%br_ln496 = br void %if.end131" [fast_src/fast_protocol.cpp:496]   --->   Operation 184 'br' 'br_ln496' <Predicate = (next_state_load == 2 & tmp_2 & tmp_4)> <Delay = 0.00>
ST_6 : Operation 185 [1/1] (0.00ns)   --->   "%br_ln497 = br void %sw.epilog" [fast_src/fast_protocol.cpp:497]   --->   Operation 185 'br' 'br_ln497' <Predicate = (next_state_load == 2)> <Delay = 0.00>
ST_6 : Operation 186 [1/2] (1.82ns)   --->   "%write_ln376 = write void @_ssdm_op_Write.axis.volatile.i64P128A, i64 %tagsOut, i64 %time_from_book_read" [fast_src/fast_protocol.cpp:376]   --->   Operation 186 'write' 'write_ln376' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 1.82> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 2.48> <Adapter> <Opcode : 'read' 'write'>
ST_6 : Operation 187 [1/1] (0.00ns)   --->   "%br_ln450 = br void %if.end81" [fast_src/fast_protocol.cpp:450]   --->   Operation 187 'br' 'br_ln450' <Predicate = (next_state_load != 2 & next_state_load != 1 & tmp & tmp_3 & tmp_5 & tmp_6 & tmp_7 & tmp_8)> <Delay = 0.00>
ST_6 : Operation 188 [1/1] (0.00ns)   --->   "%br_ln451 = br void %sw.epilog" [fast_src/fast_protocol.cpp:451]   --->   Operation 188 'br' 'br_ln451' <Predicate = (next_state_load != 2 & next_state_load != 1)> <Delay = 0.00>
ST_6 : Operation 189 [1/1] (0.00ns)   --->   "%ret_ln499 = ret" [fast_src/fast_protocol.cpp:499]   --->   Operation 189 'ret' 'ret_ln499' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 25.000ns, clock uncertainty: 6.750ns.

 <State 1>: 8.718ns
The critical path consists of the following:
	'load' operation 2 bit ('next_state_load', fast_src/fast_protocol.cpp:367) on static variable 'next_state' [20]  (0.000 ns)
	axis request operation ('tmp', fast_src/fast_protocol.cpp:371) on port 'metadata_from_book' (fast_src/fast_protocol.cpp:371) [58]  (1.724 ns)
	axis request operation ('tmp_3', fast_src/fast_protocol.cpp:371) on port 'time_from_book' (fast_src/fast_protocol.cpp:371) [61]  (1.827 ns)
	axis request operation ('tmp_5', fast_src/fast_protocol.cpp:372) on port 'order_from_book' (fast_src/fast_protocol.cpp:372) [64]  (1.827 ns)
	blocking operation 3.3405 ns on control path)

 <State 2>: 3.016ns
The critical path consists of the following:
	axis request operation ('tmp_6', fast_src/fast_protocol.cpp:372) on port 'lbTxMetadataOut' (fast_src/fast_protocol.cpp:372) [67]  (1.776 ns)
	axis request operation ('tmp_7', fast_src/fast_protocol.cpp:373) on port 'lbTxLengthOut' (fast_src/fast_protocol.cpp:373) [70]  (1.240 ns)

 <State 3>: 3.431ns
The critical path consists of the following:
	axis request operation ('tmp_1', fast_src/fast_protocol.cpp:454) on port 'lbTxDataOut' (fast_src/fast_protocol.cpp:454) [23]  (1.724 ns)
	'store' operation 0 bit ('store_ln471', fast_src/fast_protocol.cpp:471) of constant 2 on static variable 'next_state' [32]  (1.707 ns)

 <State 4>: 5.073ns
The critical path consists of the following:
	axis request operation ('tmp_8', fast_src/fast_protocol.cpp:373) on port 'tagsOut' (fast_src/fast_protocol.cpp:373) [73]  (1.827 ns)
	axis read operation ('order_from_book_read', fast_src/fast_protocol.cpp:380) on port 'order_from_book' (fast_src/fast_protocol.cpp:380) [84]  (0.518 ns)
	'icmp' operation 1 bit ('icmp_ln415', fast_src/fast_protocol.cpp:415) [93]  (1.735 ns)
	'select' operation 3 bit ('message_offset', fast_src/fast_protocol.cpp:415) [99]  (0.993 ns)

 <State 5>: 17.495ns
The critical path consists of the following:
	'icmp' operation 1 bit ('icmp_ln417', fast_src/fast_protocol.cpp:417) [107]  (1.650 ns)
	'and' operation 1 bit ('and_ln417_1', fast_src/fast_protocol.cpp:417) [116]  (0.978 ns)
	'sparsemux' operation 4 bit ('message_offset', fast_src/fast_protocol.cpp:406) [119]  (1.707 ns)
	'icmp' operation 1 bit ('icmp_ln417_3', fast_src/fast_protocol.cpp:417) [127]  (1.735 ns)
	'and' operation 1 bit ('and_ln417_4', fast_src/fast_protocol.cpp:417) [136]  (0.978 ns)
	'sparsemux' operation 4 bit ('message_offset', fast_src/fast_protocol.cpp:406) [139]  (1.827 ns)
	'icmp' operation 1 bit ('icmp_ln417_5', fast_src/fast_protocol.cpp:417) [144]  (1.735 ns)
	'and' operation 1 bit ('and_ln417_5', fast_src/fast_protocol.cpp:417) [145]  (0.978 ns)
	'sparsemux' operation 4 bit ('message_offset', fast_src/fast_protocol.cpp:399) [163]  (1.946 ns)
	'icmp' operation 1 bit ('icmp_ln425_1', fast_src/fast_protocol.cpp:425) [181]  (1.735 ns)
	'or' operation 1 bit ('or_ln425', fast_src/fast_protocol.cpp:425) [185]  (0.000 ns)
	'or' operation 1 bit ('or_ln425_3', fast_src/fast_protocol.cpp:425) [188]  (0.978 ns)
	'select' operation 8 bit ('empty_30', fast_src/fast_protocol.cpp:425) [189]  (1.248 ns)

 <State 6>: 1.827ns
The critical path consists of the following:
	axis write operation ('write_ln376', fast_src/fast_protocol.cpp:376) on port 'tagsOut' (fast_src/fast_protocol.cpp:376) [77]  (1.827 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
