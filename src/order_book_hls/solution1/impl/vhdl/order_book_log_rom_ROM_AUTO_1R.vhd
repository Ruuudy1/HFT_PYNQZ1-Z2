-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity order_book_log_rom_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 3; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of order_book_log_rom_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000", 1 => "000", 2 => "001", 3 => "001", 
    4 => "010", 5 => "010", 6 => "010", 7 => "010", 
    8 => "011", 9 => "011", 10 => "011", 11 => "011", 
    12 => "011", 13 => "011", 14 => "011", 15 => "011", 
    16 => "100", 17 => "100", 18 => "100", 19 => "100", 
    20 => "100", 21 => "100", 22 => "100", 23 => "100", 
    24 => "100", 25 => "100", 26 => "100", 27 => "100", 
    28 => "100", 29 => "100", 30 => "100", 31 => "100", 
    32 => "101", 33 => "101", 34 => "101", 35 => "101", 
    36 => "101", 37 => "101", 38 => "101", 39 => "101", 
    40 => "101", 41 => "101", 42 => "101", 43 => "101", 
    44 => "101", 45 => "101", 46 => "101", 47 => "101", 
    48 => "101", 49 => "101", 50 => "101", 51 => "101", 
    52 => "101", 53 => "101", 54 => "101", 55 => "101", 
    56 => "101", 57 => "101", 58 => "101", 59 => "101", 
    60 => "101", 61 => "101", 62 => "101", 63 => "101", 
    64 => "110", 65 => "110", 66 => "110", 67 => "110", 
    68 => "110", 69 => "110", 70 => "110", 71 => "110", 
    72 => "110", 73 => "110", 74 => "110", 75 => "110", 
    76 => "110", 77 => "110", 78 => "110", 79 => "110", 
    80 => "110", 81 => "110", 82 => "110", 83 => "110", 
    84 => "110", 85 => "110", 86 => "110", 87 => "110", 
    88 => "110", 89 => "110", 90 => "110", 91 => "110", 
    92 => "110", 93 => "110", 94 => "110", 95 => "110", 
    96 => "110", 97 => "110", 98 => "110", 99 => "110", 
    100 => "110", 101 => "110", 102 => "110", 103 => "110", 
    104 => "110", 105 => "110", 106 => "110", 107 => "110", 
    108 => "110", 109 => "110", 110 => "110", 111 => "110", 
    112 => "110", 113 => "110", 114 => "110", 115 => "110", 
    116 => "110", 117 => "110", 118 => "110", 119 => "110", 
    120 => "110", 121 => "110", 122 => "110", 123 => "110", 
    124 => "110", 125 => "110", 126 => "110", 127 => "110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

