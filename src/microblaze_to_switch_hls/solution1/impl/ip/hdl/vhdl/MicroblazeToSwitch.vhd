-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MicroblazeToSwitch is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    rxDataMonitor_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    rxDataMonitor_TVALID : OUT STD_LOGIC;
    rxDataMonitor_TREADY : IN STD_LOGIC;
    rxMetadataMonitor_TDATA : OUT STD_LOGIC_VECTOR (95 downto 0);
    rxMetadataMonitor_TVALID : OUT STD_LOGIC;
    rxMetadataMonitor_TREADY : IN STD_LOGIC;
    rxLengthMonitor_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    rxLengthMonitor_TVALID : OUT STD_LOGIC;
    rxLengthMonitor_TREADY : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of MicroblazeToSwitch is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MicroblazeToSwitch_MicroblazeToSwitch,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.499500,HLS_SYN_LAT=5,HLS_SYN_TPT=4,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=119,HLS_SYN_LUT=255,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv96_101010205A4010101010281 : STD_LOGIC_VECTOR (95 downto 0) := "000000010000000100000001000000100000010110100100000000010000000100000001000000010000001010000001";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal best_bid_sw : STD_LOGIC_VECTOR (31 downto 0);
    signal best_ask_sw : STD_LOGIC_VECTOR (31 downto 0);
    signal rate_cnt : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal rxDataMonitor_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_grp1 : BOOLEAN;
    signal ready_to_send_reg_194 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_198 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_202 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nbwritereq_fu_92_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_grp2 : BOOLEAN;
    signal tmp_2_reg_206 : STD_LOGIC_VECTOR (0 downto 0);
    signal rxMetadataMonitor_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_grp5 : BOOLEAN;
    signal ready_to_send_reg_194_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_subdone_grp5_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp5 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal rxLengthMonitor_TDATA_blk_n : STD_LOGIC;
    signal ready_to_send_fu_153_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op45_write_state5 : BOOLEAN;
    signal ap_predicate_op46_write_state5 : BOOLEAN;
    signal ap_predicate_op47_write_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1_grp2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp2 : BOOLEAN;
    signal ap_predicate_op48_write_state6 : BOOLEAN;
    signal ap_predicate_op49_write_state6 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1_grp5 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_grp5 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_predicate_op44_write_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal regslice_both_rxDataMonitor_U_apdone_blk : STD_LOGIC;
    signal regslice_both_rxMetadataMonitor_U_apdone_blk : STD_LOGIC;
    signal regslice_both_rxLengthMonitor_U_apdone_blk : STD_LOGIC;
    signal select_ln51_fu_161_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage3_01001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp2 : BOOLEAN;
    signal zext_ln51_fu_139_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln51_fu_143_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln51_fu_149_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_fu_175_p4 : STD_LOGIC_VECTOR (64 downto 0);
    signal sext_ln88_fu_185_p1 : STD_LOGIC_VECTOR (72 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal rxDataMonitor_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal rxDataMonitor_TVALID_int_regslice : STD_LOGIC;
    signal rxDataMonitor_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_rxDataMonitor_U_vld_out : STD_LOGIC;
    signal rxMetadataMonitor_TVALID_int_regslice : STD_LOGIC;
    signal rxMetadataMonitor_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_rxMetadataMonitor_U_vld_out : STD_LOGIC;
    signal rxLengthMonitor_TVALID_int_regslice : STD_LOGIC;
    signal rxLengthMonitor_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_rxLengthMonitor_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MicroblazeToSwitch_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        best_bid_sw : OUT STD_LOGIC_VECTOR (31 downto 0);
        best_ask_sw : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MicroblazeToSwitch_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component MicroblazeToSwitch_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        best_bid_sw => best_bid_sw,
        best_ask_sw => best_ask_sw);

    regslice_both_rxDataMonitor_U : component MicroblazeToSwitch_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => rxDataMonitor_TDATA_int_regslice,
        vld_in => rxDataMonitor_TVALID_int_regslice,
        ack_in => rxDataMonitor_TREADY_int_regslice,
        data_out => rxDataMonitor_TDATA,
        vld_out => regslice_both_rxDataMonitor_U_vld_out,
        ack_out => rxDataMonitor_TREADY,
        apdone_blk => regslice_both_rxDataMonitor_U_apdone_blk);

    regslice_both_rxMetadataMonitor_U : component MicroblazeToSwitch_regslice_both
    generic map (
        DataWidth => 96)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv96_101010205A4010101010281,
        vld_in => rxMetadataMonitor_TVALID_int_regslice,
        ack_in => rxMetadataMonitor_TREADY_int_regslice,
        data_out => rxMetadataMonitor_TDATA,
        vld_out => regslice_both_rxMetadataMonitor_U_vld_out,
        ack_out => rxMetadataMonitor_TREADY,
        apdone_blk => regslice_both_rxMetadataMonitor_U_apdone_blk);

    regslice_both_rxLengthMonitor_U : component MicroblazeToSwitch_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv16_8,
        vld_in => rxLengthMonitor_TVALID_int_regslice,
        ack_in => rxLengthMonitor_TREADY_int_regslice,
        data_out => rxLengthMonitor_TDATA,
        vld_out => regslice_both_rxLengthMonitor_U_vld_out,
        ack_out => rxLengthMonitor_TREADY,
        apdone_blk => regslice_both_rxLengthMonitor_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp5_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_block_pp0_stage1_subdone_grp5_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp5_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp5)) then 
                        ap_block_pp0_stage1_subdone_grp5_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp2) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                rate_cnt <= select_ln51_fu_161_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ready_to_send_reg_194 <= add_ln51_fu_143_p2(2 downto 2);
                ready_to_send_reg_194_pp0_iter1_reg <= ready_to_send_reg_194;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_1_reg_202 <= (0=>rxMetadataMonitor_TREADY_int_regslice, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_2_reg_206 <= (0=>rxLengthMonitor_TREADY_int_regslice, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp5_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_reg_198 <= (0=>rxDataMonitor_TREADY_int_regslice, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln51_fu_143_p2 <= std_logic_vector(unsigned(zext_ln51_fu_139_p1) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);

    ap_block_pp0_stage0_01001_grp2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage0_iter1_grp2)
    begin
                ap_block_pp0_stage0_01001_grp2 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter1_grp2));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage0_iter1_grp2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter1_grp2));
    end process;


    ap_block_pp0_stage0_11001_grp2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage0_iter1_grp2)
    begin
                ap_block_pp0_stage0_11001_grp2 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter1_grp2));
    end process;

        ap_block_pp0_stage0_grp2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage0_iter1_grp2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter1_grp2));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone_grp5_done_reg, ap_block_state6_pp0_stage1_iter1_grp5, regslice_both_rxDataMonitor_U_apdone_blk, regslice_both_rxMetadataMonitor_U_apdone_blk, regslice_both_rxLengthMonitor_U_apdone_blk)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((regslice_both_rxLengthMonitor_U_apdone_blk = ap_const_logic_1) or (regslice_both_rxMetadataMonitor_U_apdone_blk = ap_const_logic_1) or (regslice_both_rxDataMonitor_U_apdone_blk = ap_const_logic_1) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp5_done_reg) and (ap_const_boolean_1 = ap_block_state6_pp0_stage1_iter1_grp5))));
    end process;


    ap_block_pp0_stage1_11001_grp5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone_grp5_done_reg, ap_block_state6_pp0_stage1_iter1_grp5)
    begin
                ap_block_pp0_stage1_11001_grp5 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp5_done_reg) and (ap_const_boolean_1 = ap_block_state6_pp0_stage1_iter1_grp5));
    end process;

        ap_block_pp0_stage1_grp5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone_grp5_done_reg, ap_block_state6_pp0_stage1_iter1_grp5, regslice_both_rxDataMonitor_U_apdone_blk, regslice_both_rxMetadataMonitor_U_apdone_blk, regslice_both_rxLengthMonitor_U_apdone_blk)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((regslice_both_rxLengthMonitor_U_apdone_blk = ap_const_logic_1) or (regslice_both_rxMetadataMonitor_U_apdone_blk = ap_const_logic_1) or (regslice_both_rxDataMonitor_U_apdone_blk = ap_const_logic_1) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp5_done_reg) and (ap_const_boolean_1 = ap_block_state6_pp0_stage1_iter1_grp5))));
    end process;


    ap_block_pp0_stage1_subdone_grp5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone_grp5_done_reg, ap_block_state6_pp0_stage1_iter1_grp5)
    begin
                ap_block_pp0_stage1_subdone_grp5 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp5_done_reg) and (ap_const_boolean_1 = ap_block_state6_pp0_stage1_iter1_grp5));
    end process;

        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_grp1_assign_proc : process(ap_block_state4_pp0_stage3_iter0_grp1)
    begin
                ap_block_pp0_stage3_01001_grp1 <= ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0_grp1));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_block_state4_pp0_stage3_iter0_grp1)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0_grp1));
    end process;


    ap_block_pp0_stage3_11001_grp1_assign_proc : process(ap_block_state4_pp0_stage3_iter0_grp1)
    begin
                ap_block_pp0_stage3_11001_grp1 <= ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0_grp1));
    end process;

        ap_block_pp0_stage3_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_subdone_assign_proc : process(ap_block_state4_pp0_stage3_iter0_grp1)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0_grp1));
    end process;


    ap_block_state4_pp0_stage3_iter0_grp1_assign_proc : process(ap_predicate_op44_write_state4, rxDataMonitor_TREADY_int_regslice)
    begin
                ap_block_state4_pp0_stage3_iter0_grp1 <= ((rxDataMonitor_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op44_write_state4 = ap_const_boolean_1));
    end process;


    ap_block_state5_pp0_stage0_iter1_grp2_assign_proc : process(ap_predicate_op45_write_state5, ap_predicate_op46_write_state5, ap_predicate_op47_write_state5, rxDataMonitor_TREADY_int_regslice, rxMetadataMonitor_TREADY_int_regslice, rxLengthMonitor_TREADY_int_regslice)
    begin
                ap_block_state5_pp0_stage0_iter1_grp2 <= (((rxLengthMonitor_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op47_write_state5 = ap_const_boolean_1)) or ((rxMetadataMonitor_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op46_write_state5 = ap_const_boolean_1)) or ((rxDataMonitor_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op45_write_state5 = ap_const_boolean_1)));
    end process;


    ap_block_state6_pp0_stage1_iter1_grp5_assign_proc : process(ap_predicate_op48_write_state6, ap_predicate_op49_write_state6, rxMetadataMonitor_TREADY_int_regslice, rxLengthMonitor_TREADY_int_regslice)
    begin
                ap_block_state6_pp0_stage1_iter1_grp5 <= (((rxLengthMonitor_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op49_write_state6 = ap_const_boolean_1)) or ((rxMetadataMonitor_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op48_write_state6 = ap_const_boolean_1)));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op44_write_state4_assign_proc : process(ready_to_send_reg_194, tmp_reg_198, tmp_1_reg_202, grp_nbwritereq_fu_92_p3)
    begin
                ap_predicate_op44_write_state4 <= ((grp_nbwritereq_fu_92_p3 = ap_const_lv1_1) and (tmp_1_reg_202 = ap_const_lv1_1) and (tmp_reg_198 = ap_const_lv1_1) and (ready_to_send_reg_194 = ap_const_lv1_1));
    end process;


    ap_predicate_op45_write_state5_assign_proc : process(ready_to_send_reg_194, tmp_reg_198, tmp_1_reg_202, tmp_2_reg_206)
    begin
                ap_predicate_op45_write_state5 <= ((tmp_2_reg_206 = ap_const_lv1_1) and (tmp_1_reg_202 = ap_const_lv1_1) and (tmp_reg_198 = ap_const_lv1_1) and (ready_to_send_reg_194 = ap_const_lv1_1));
    end process;


    ap_predicate_op46_write_state5_assign_proc : process(ready_to_send_reg_194, tmp_reg_198, tmp_1_reg_202, tmp_2_reg_206)
    begin
                ap_predicate_op46_write_state5 <= ((tmp_2_reg_206 = ap_const_lv1_1) and (tmp_1_reg_202 = ap_const_lv1_1) and (tmp_reg_198 = ap_const_lv1_1) and (ready_to_send_reg_194 = ap_const_lv1_1));
    end process;


    ap_predicate_op47_write_state5_assign_proc : process(ready_to_send_reg_194, tmp_reg_198, tmp_1_reg_202, tmp_2_reg_206)
    begin
                ap_predicate_op47_write_state5 <= ((tmp_2_reg_206 = ap_const_lv1_1) and (tmp_1_reg_202 = ap_const_lv1_1) and (tmp_reg_198 = ap_const_lv1_1) and (ready_to_send_reg_194 = ap_const_lv1_1));
    end process;


    ap_predicate_op48_write_state6_assign_proc : process(tmp_reg_198, tmp_1_reg_202, tmp_2_reg_206, ready_to_send_reg_194_pp0_iter1_reg)
    begin
                ap_predicate_op48_write_state6 <= ((ready_to_send_reg_194_pp0_iter1_reg = ap_const_lv1_1) and (tmp_2_reg_206 = ap_const_lv1_1) and (tmp_1_reg_202 = ap_const_lv1_1) and (tmp_reg_198 = ap_const_lv1_1));
    end process;


    ap_predicate_op49_write_state6_assign_proc : process(tmp_reg_198, tmp_1_reg_202, tmp_2_reg_206, ready_to_send_reg_194_pp0_iter1_reg)
    begin
                ap_predicate_op49_write_state6 <= ((ready_to_send_reg_194_pp0_iter1_reg = ap_const_lv1_1) and (tmp_2_reg_206 = ap_const_lv1_1) and (tmp_1_reg_202 = ap_const_lv1_1) and (tmp_reg_198 = ap_const_lv1_1));
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_nbwritereq_fu_92_p3 <= (0=>rxLengthMonitor_TREADY_int_regslice, others=>'-');
    or_ln_fu_175_p4 <= ((ap_const_lv1_1 & best_bid_sw) & best_ask_sw);
    ready_to_send_fu_153_p3 <= add_ln51_fu_143_p2(2 downto 2);

    rxDataMonitor_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_grp1, ready_to_send_reg_194, tmp_reg_198, tmp_1_reg_202, grp_nbwritereq_fu_92_p3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_grp2, tmp_2_reg_206, rxDataMonitor_TREADY_int_regslice)
    begin
        if ((((tmp_2_reg_206 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_1_reg_202 = ap_const_lv1_1) and (tmp_reg_198 = ap_const_lv1_1) and (ready_to_send_reg_194 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((grp_nbwritereq_fu_92_p3 = ap_const_lv1_1) and (tmp_1_reg_202 = ap_const_lv1_1) and (tmp_reg_198 = ap_const_lv1_1) and (ready_to_send_reg_194 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_grp1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            rxDataMonitor_TDATA_blk_n <= rxDataMonitor_TREADY_int_regslice;
        else 
            rxDataMonitor_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    rxDataMonitor_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln88_fu_185_p1),128));
    rxDataMonitor_TVALID <= regslice_both_rxDataMonitor_U_vld_out;

    rxDataMonitor_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_predicate_op44_write_state4, ap_block_pp0_stage3_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001_grp1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_predicate_op44_write_state4 = ap_const_boolean_1))) then 
            rxDataMonitor_TVALID_int_regslice <= ap_const_logic_1;
        else 
            rxDataMonitor_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    rxLengthMonitor_TDATA_blk_n_assign_proc : process(ready_to_send_reg_194, tmp_reg_198, tmp_1_reg_202, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_grp2, tmp_2_reg_206, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_grp5, ready_to_send_reg_194_pp0_iter1_reg, ap_block_pp0_stage1_subdone_grp5_done_reg, rxLengthMonitor_TREADY_int_regslice)
    begin
        if ((((ready_to_send_reg_194_pp0_iter1_reg = ap_const_lv1_1) and (tmp_2_reg_206 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_1_reg_202 = ap_const_lv1_1) and (tmp_reg_198 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp5_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((tmp_2_reg_206 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_1_reg_202 = ap_const_lv1_1) and (tmp_reg_198 = ap_const_lv1_1) and (ready_to_send_reg_194 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            rxLengthMonitor_TDATA_blk_n <= rxLengthMonitor_TREADY_int_regslice;
        else 
            rxLengthMonitor_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    rxLengthMonitor_TVALID <= regslice_both_rxLengthMonitor_U_vld_out;

    rxLengthMonitor_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op47_write_state5, ap_block_pp0_stage0_11001_grp2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op47_write_state5 = ap_const_boolean_1))) then 
            rxLengthMonitor_TVALID_int_regslice <= ap_const_logic_1;
        else 
            rxLengthMonitor_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    rxMetadataMonitor_TDATA_blk_n_assign_proc : process(ready_to_send_reg_194, tmp_reg_198, tmp_1_reg_202, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_grp2, tmp_2_reg_206, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_grp5, ready_to_send_reg_194_pp0_iter1_reg, ap_block_pp0_stage1_subdone_grp5_done_reg, rxMetadataMonitor_TREADY_int_regslice)
    begin
        if ((((ready_to_send_reg_194_pp0_iter1_reg = ap_const_lv1_1) and (tmp_2_reg_206 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_1_reg_202 = ap_const_lv1_1) and (tmp_reg_198 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp5_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((tmp_2_reg_206 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_1_reg_202 = ap_const_lv1_1) and (tmp_reg_198 = ap_const_lv1_1) and (ready_to_send_reg_194 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            rxMetadataMonitor_TDATA_blk_n <= rxMetadataMonitor_TREADY_int_regslice;
        else 
            rxMetadataMonitor_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    rxMetadataMonitor_TVALID <= regslice_both_rxMetadataMonitor_U_vld_out;

    rxMetadataMonitor_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op46_write_state5, ap_block_pp0_stage0_11001_grp2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op46_write_state5 = ap_const_boolean_1))) then 
            rxMetadataMonitor_TVALID_int_regslice <= ap_const_logic_1;
        else 
            rxMetadataMonitor_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    select_ln51_fu_161_p3 <= 
        ap_const_lv2_0 when (ready_to_send_fu_153_p3(0) = '1') else 
        trunc_ln51_fu_149_p1;
        sext_ln88_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln_fu_175_p4),73));

    trunc_ln51_fu_149_p1 <= add_ln51_fu_143_p2(2 - 1 downto 0);
    zext_ln51_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rate_cnt),3));
end behav;
