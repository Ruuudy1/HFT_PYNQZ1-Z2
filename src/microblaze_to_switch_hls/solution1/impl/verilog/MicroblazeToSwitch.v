// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MicroblazeToSwitch_MicroblazeToSwitch,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.499500,HLS_SYN_LAT=5,HLS_SYN_TPT=4,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=119,HLS_SYN_LUT=255,HLS_VERSION=2024_2}" *)

module MicroblazeToSwitch (
        ap_clk,
        ap_rst_n,
        rxDataMonitor_TDATA,
        rxDataMonitor_TVALID,
        rxDataMonitor_TREADY,
        rxMetadataMonitor_TDATA,
        rxMetadataMonitor_TVALID,
        rxMetadataMonitor_TREADY,
        rxLengthMonitor_TDATA,
        rxLengthMonitor_TVALID,
        rxLengthMonitor_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [127:0] rxDataMonitor_TDATA;
output   rxDataMonitor_TVALID;
input   rxDataMonitor_TREADY;
output  [95:0] rxMetadataMonitor_TDATA;
output   rxMetadataMonitor_TVALID;
input   rxMetadataMonitor_TREADY;
output  [15:0] rxLengthMonitor_TDATA;
output   rxLengthMonitor_TVALID;
input   rxLengthMonitor_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] best_bid_sw;
wire   [31:0] best_ask_sw;
reg   [1:0] rate_cnt;
reg    rxDataMonitor_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_grp1;
reg   [0:0] ready_to_send_reg_194;
reg   [0:0] tmp_reg_198;
reg   [0:0] tmp_1_reg_202;
wire   [0:0] grp_nbwritereq_fu_92_p3;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_grp2;
reg   [0:0] tmp_2_reg_206;
reg    rxMetadataMonitor_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_grp5;
reg   [0:0] ready_to_send_reg_194_pp0_iter1_reg;
reg    ap_block_pp0_stage1_subdone_grp5_done_reg;
reg    ap_block_pp0_stage1_subdone_grp5;
reg    ap_block_pp0_stage1_subdone;
reg    rxLengthMonitor_TDATA_blk_n;
wire   [0:0] ready_to_send_fu_153_p3;
reg    ap_predicate_op45_write_state5;
reg    ap_predicate_op46_write_state5;
reg    ap_predicate_op47_write_state5;
reg    ap_block_state5_pp0_stage0_iter1_grp2;
reg    ap_block_pp0_stage0_11001_grp2;
reg    ap_predicate_op48_write_state6;
reg    ap_predicate_op49_write_state6;
reg    ap_block_state6_pp0_stage1_iter1_grp5;
reg    ap_block_pp0_stage1_11001_grp5;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
reg    ap_predicate_op44_write_state4;
reg    ap_block_state4_pp0_stage3_iter0_grp1;
reg    ap_block_pp0_stage3_11001_grp1;
reg    ap_block_pp0_stage3_subdone;
wire    regslice_both_rxDataMonitor_U_apdone_blk;
wire    regslice_both_rxMetadataMonitor_U_apdone_blk;
wire    regslice_both_rxLengthMonitor_U_apdone_blk;
wire   [1:0] select_ln51_fu_161_p3;
reg    ap_block_pp0_stage3_01001_grp1;
reg    ap_block_pp0_stage0_01001_grp2;
wire   [2:0] zext_ln51_fu_139_p1;
wire   [2:0] add_ln51_fu_143_p2;
wire   [1:0] trunc_ln51_fu_149_p1;
wire   [64:0] or_ln_fu_175_p4;
wire  signed [72:0] sext_ln88_fu_185_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_11001;
wire    ap_reset_idle_pp0;
reg    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [127:0] rxDataMonitor_TDATA_int_regslice;
reg    rxDataMonitor_TVALID_int_regslice;
wire    rxDataMonitor_TREADY_int_regslice;
wire    regslice_both_rxDataMonitor_U_vld_out;
reg    rxMetadataMonitor_TVALID_int_regslice;
wire    rxMetadataMonitor_TREADY_int_regslice;
wire    regslice_both_rxMetadataMonitor_U_vld_out;
reg    rxLengthMonitor_TVALID_int_regslice;
wire    rxLengthMonitor_TREADY_int_regslice;
wire    regslice_both_rxLengthMonitor_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 rate_cnt = 2'd0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp5_done_reg = 1'b0;
end

MicroblazeToSwitch_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .best_bid_sw(best_bid_sw),
    .best_ask_sw(best_ask_sw)
);

MicroblazeToSwitch_regslice_both #(
    .DataWidth( 128 ))
regslice_both_rxDataMonitor_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(rxDataMonitor_TDATA_int_regslice),
    .vld_in(rxDataMonitor_TVALID_int_regslice),
    .ack_in(rxDataMonitor_TREADY_int_regslice),
    .data_out(rxDataMonitor_TDATA),
    .vld_out(regslice_both_rxDataMonitor_U_vld_out),
    .ack_out(rxDataMonitor_TREADY),
    .apdone_blk(regslice_both_rxDataMonitor_U_apdone_blk)
);

MicroblazeToSwitch_regslice_both #(
    .DataWidth( 96 ))
regslice_both_rxMetadataMonitor_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(96'd310698695307381685157429889),
    .vld_in(rxMetadataMonitor_TVALID_int_regslice),
    .ack_in(rxMetadataMonitor_TREADY_int_regslice),
    .data_out(rxMetadataMonitor_TDATA),
    .vld_out(regslice_both_rxMetadataMonitor_U_vld_out),
    .ack_out(rxMetadataMonitor_TREADY),
    .apdone_blk(regslice_both_rxMetadataMonitor_U_apdone_blk)
);

MicroblazeToSwitch_regslice_both #(
    .DataWidth( 16 ))
regslice_both_rxLengthMonitor_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd8),
    .vld_in(rxLengthMonitor_TVALID_int_regslice),
    .ack_in(rxLengthMonitor_TREADY_int_regslice),
    .data_out(rxLengthMonitor_TDATA),
    .vld_out(regslice_both_rxLengthMonitor_U_vld_out),
    .ack_out(rxLengthMonitor_TREADY),
    .apdone_blk(regslice_both_rxLengthMonitor_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp5_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp5_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp5)) begin
                ap_block_pp0_stage1_subdone_grp5_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp2) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rate_cnt <= select_ln51_fu_161_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ready_to_send_reg_194 <= add_ln51_fu_143_p2[32'd2];
        ready_to_send_reg_194_pp0_iter1_reg <= ready_to_send_reg_194;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_1_reg_202 <= rxMetadataMonitor_TREADY_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_2_reg_206 <= rxLengthMonitor_TREADY_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone_grp5_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp5) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_reg_198 <= rxDataMonitor_TREADY_int_regslice;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((tmp_2_reg_206 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_1_reg_202 == 1'd1) & (tmp_reg_198 == 1'd1) & (ready_to_send_reg_194 == 1'd1) & (1'b0 == ap_block_pp0_stage0_grp2) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((grp_nbwritereq_fu_92_p3 == 1'd1) & (tmp_1_reg_202 == 1'd1) & (tmp_reg_198 == 1'd1) & (ready_to_send_reg_194 == 1'd1) & (1'b0 == ap_block_pp0_stage3_grp1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        rxDataMonitor_TDATA_blk_n = rxDataMonitor_TREADY_int_regslice;
    end else begin
        rxDataMonitor_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001_grp1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_predicate_op44_write_state4 == 1'b1))) begin
        rxDataMonitor_TVALID_int_regslice = 1'b1;
    end else begin
        rxDataMonitor_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ready_to_send_reg_194_pp0_iter1_reg == 1'd1) & (tmp_2_reg_206 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_1_reg_202 == 1'd1) & (tmp_reg_198 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone_grp5_done_reg) & (1'b0 == ap_block_pp0_stage1_grp5) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((tmp_2_reg_206 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_1_reg_202 == 1'd1) & (tmp_reg_198 == 1'd1) & (ready_to_send_reg_194 == 1'd1) & (1'b0 == ap_block_pp0_stage0_grp2) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        rxLengthMonitor_TDATA_blk_n = rxLengthMonitor_TREADY_int_regslice;
    end else begin
        rxLengthMonitor_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op47_write_state5 == 1'b1))) begin
        rxLengthMonitor_TVALID_int_regslice = 1'b1;
    end else begin
        rxLengthMonitor_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ready_to_send_reg_194_pp0_iter1_reg == 1'd1) & (tmp_2_reg_206 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_1_reg_202 == 1'd1) & (tmp_reg_198 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone_grp5_done_reg) & (1'b0 == ap_block_pp0_stage1_grp5) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((tmp_2_reg_206 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_1_reg_202 == 1'd1) & (tmp_reg_198 == 1'd1) & (ready_to_send_reg_194 == 1'd1) & (1'b0 == ap_block_pp0_stage0_grp2) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        rxMetadataMonitor_TDATA_blk_n = rxMetadataMonitor_TREADY_int_regslice;
    end else begin
        rxMetadataMonitor_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op46_write_state5 == 1'b1))) begin
        rxMetadataMonitor_TVALID_int_regslice = 1'b1;
    end else begin
        rxMetadataMonitor_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln51_fu_143_p2 = (zext_ln51_fu_139_p1 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_pp0_stage0_01001_grp2 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter1_grp2));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter1_grp2));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp2 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter1_grp2));
end

assign ap_block_pp0_stage0_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter1_grp2));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_rxLengthMonitor_U_apdone_blk == 1'b1) | (regslice_both_rxMetadataMonitor_U_apdone_blk == 1'b1) | (regslice_both_rxDataMonitor_U_apdone_blk == 1'b1) | ((1'b0 == ap_block_pp0_stage1_subdone_grp5_done_reg) & (1'b1 == ap_block_state6_pp0_stage1_iter1_grp5))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_grp5 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp5_done_reg) & (1'b1 == ap_block_state6_pp0_stage1_iter1_grp5));
end

assign ap_block_pp0_stage1_grp5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_rxLengthMonitor_U_apdone_blk == 1'b1) | (regslice_both_rxMetadataMonitor_U_apdone_blk == 1'b1) | (regslice_both_rxDataMonitor_U_apdone_blk == 1'b1) | ((1'b0 == ap_block_pp0_stage1_subdone_grp5_done_reg) & (1'b1 == ap_block_state6_pp0_stage1_iter1_grp5))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone_grp5 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp5_done_reg) & (1'b1 == ap_block_state6_pp0_stage1_iter1_grp5));
end

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001_grp1 = ((1'b1 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage3_iter0_grp1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((1'b1 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage3_iter0_grp1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001_grp1 = ((1'b1 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage3_iter0_grp1));
end

assign ap_block_pp0_stage3_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((1'b1 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage3_iter0_grp1));
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0_grp1 = ((rxDataMonitor_TREADY_int_regslice == 1'b0) & (ap_predicate_op44_write_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1_grp2 = (((rxLengthMonitor_TREADY_int_regslice == 1'b0) & (ap_predicate_op47_write_state5 == 1'b1)) | ((rxMetadataMonitor_TREADY_int_regslice == 1'b0) & (ap_predicate_op46_write_state5 == 1'b1)) | ((rxDataMonitor_TREADY_int_regslice == 1'b0) & (ap_predicate_op45_write_state5 == 1'b1)));
end

always @ (*) begin
    ap_block_state6_pp0_stage1_iter1_grp5 = (((rxLengthMonitor_TREADY_int_regslice == 1'b0) & (ap_predicate_op49_write_state6 == 1'b1)) | ((rxMetadataMonitor_TREADY_int_regslice == 1'b0) & (ap_predicate_op48_write_state6 == 1'b1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op44_write_state4 = ((grp_nbwritereq_fu_92_p3 == 1'd1) & (tmp_1_reg_202 == 1'd1) & (tmp_reg_198 == 1'd1) & (ready_to_send_reg_194 == 1'd1));
end

always @ (*) begin
    ap_predicate_op45_write_state5 = ((tmp_2_reg_206 == 1'd1) & (tmp_1_reg_202 == 1'd1) & (tmp_reg_198 == 1'd1) & (ready_to_send_reg_194 == 1'd1));
end

always @ (*) begin
    ap_predicate_op46_write_state5 = ((tmp_2_reg_206 == 1'd1) & (tmp_1_reg_202 == 1'd1) & (tmp_reg_198 == 1'd1) & (ready_to_send_reg_194 == 1'd1));
end

always @ (*) begin
    ap_predicate_op47_write_state5 = ((tmp_2_reg_206 == 1'd1) & (tmp_1_reg_202 == 1'd1) & (tmp_reg_198 == 1'd1) & (ready_to_send_reg_194 == 1'd1));
end

always @ (*) begin
    ap_predicate_op48_write_state6 = ((ready_to_send_reg_194_pp0_iter1_reg == 1'd1) & (tmp_2_reg_206 == 1'd1) & (tmp_1_reg_202 == 1'd1) & (tmp_reg_198 == 1'd1));
end

always @ (*) begin
    ap_predicate_op49_write_state6 = ((ready_to_send_reg_194_pp0_iter1_reg == 1'd1) & (tmp_2_reg_206 == 1'd1) & (tmp_1_reg_202 == 1'd1) & (tmp_reg_198 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_nbwritereq_fu_92_p3 = rxLengthMonitor_TREADY_int_regslice;

assign or_ln_fu_175_p4 = {{{{1'd1}, {best_bid_sw}}}, {best_ask_sw}};

assign ready_to_send_fu_153_p3 = add_ln51_fu_143_p2[32'd2];

assign rxDataMonitor_TDATA_int_regslice = $unsigned(sext_ln88_fu_185_p1);

assign rxDataMonitor_TVALID = regslice_both_rxDataMonitor_U_vld_out;

assign rxLengthMonitor_TVALID = regslice_both_rxLengthMonitor_U_vld_out;

assign rxMetadataMonitor_TVALID = regslice_both_rxMetadataMonitor_U_vld_out;

assign select_ln51_fu_161_p3 = ((ready_to_send_fu_153_p3[0:0] == 1'b1) ? 2'd0 : trunc_ln51_fu_149_p1);

assign sext_ln88_fu_185_p1 = $signed(or_ln_fu_175_p4);

assign trunc_ln51_fu_149_p1 = add_ln51_fu_143_p2[1:0];

assign zext_ln51_fu_139_p1 = rate_cnt;


reg find_kernel_block = 0;
// synthesis translate_off
`include "MicroblazeToSwitch_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //MicroblazeToSwitch

